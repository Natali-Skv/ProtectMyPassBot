// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: passman.proto

package passman

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PassmanService_GetCredentials_FullMethodName = "/passman.PassmanService/GetCredentials"
	PassmanService_RegisterUser_FullMethodName   = "/passman.PassmanService/RegisterUser"
)

// PassmanServiceClient is the client API for PassmanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassmanServiceClient interface {
	GetCredentials(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*ServiceCredentials, error)
	RegisterUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RegisterReq, error)
}

type passmanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassmanServiceClient(cc grpc.ClientConnInterface) PassmanServiceClient {
	return &passmanServiceClient{cc}
}

func (c *passmanServiceClient) GetCredentials(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*ServiceCredentials, error) {
	out := new(ServiceCredentials)
	err := c.cc.Invoke(ctx, PassmanService_GetCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passmanServiceClient) RegisterUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RegisterReq, error) {
	out := new(RegisterReq)
	err := c.cc.Invoke(ctx, PassmanService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassmanServiceServer is the server API for PassmanService service.
// All implementations must embed UnimplementedPassmanServiceServer
// for forward compatibility
type PassmanServiceServer interface {
	GetCredentials(context.Context, *GetReq) (*ServiceCredentials, error)
	RegisterUser(context.Context, *empty.Empty) (*RegisterReq, error)
	mustEmbedUnimplementedPassmanServiceServer()
}

// UnimplementedPassmanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPassmanServiceServer struct {
}

func (UnimplementedPassmanServiceServer) GetCredentials(context.Context, *GetReq) (*ServiceCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedPassmanServiceServer) RegisterUser(context.Context, *empty.Empty) (*RegisterReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPassmanServiceServer) mustEmbedUnimplementedPassmanServiceServer() {}

// UnsafePassmanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassmanServiceServer will
// result in compilation errors.
type UnsafePassmanServiceServer interface {
	mustEmbedUnimplementedPassmanServiceServer()
}

func RegisterPassmanServiceServer(s grpc.ServiceRegistrar, srv PassmanServiceServer) {
	s.RegisterService(&PassmanService_ServiceDesc, srv)
}

func _PassmanService_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassmanServiceServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassmanService_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassmanServiceServer).GetCredentials(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassmanService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassmanServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassmanService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassmanServiceServer).RegisterUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PassmanService_ServiceDesc is the grpc.ServiceDesc for PassmanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassmanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "passman.PassmanService",
	HandlerType: (*PassmanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredentials",
			Handler:    _PassmanService_GetCredentials_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _PassmanService_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passman.proto",
}
